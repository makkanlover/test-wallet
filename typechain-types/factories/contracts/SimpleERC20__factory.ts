/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SimpleERC20,
  SimpleERC20Interface,
} from "../../contracts/SimpleERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020bb380380620020bb83398181016040528101906200003791906200072e565b80858581600390816200004b919062000a35565b5080600490816200005d919062000a35565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cc919062000b2d565b60405180910390fd5b620000e6816200013a60201b60201c565b5082600560146101000a81548160ff021916908360ff1602179055506200012f8184600a62000116919062000ccd565b8462000123919062000d1e565b6200020060201b60201c565b505050505062000e0f565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620002755760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016200026c919062000b2d565b60405180910390fd5b62000289600083836200028d60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620002e3578060026000828254620002d6919062000d69565b92505081905550620003b9565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101562000372578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401620003699392919062000db5565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000404578060026000828254039250508190555062000451565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620004b0919062000df2565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200052682620004db565b810181811067ffffffffffffffff82111715620005485762000547620004ec565b5b80604052505050565b60006200055d620004bd565b90506200056b82826200051b565b919050565b600067ffffffffffffffff8211156200058e576200058d620004ec565b5b6200059982620004db565b9050602081019050919050565b60005b83811015620005c6578082015181840152602081019050620005a9565b60008484015250505050565b6000620005e9620005e38462000570565b62000551565b905082815260208101848484011115620006085762000607620004d6565b5b62000615848285620005a6565b509392505050565b600082601f830112620006355762000634620004d1565b5b815162000647848260208601620005d2565b91505092915050565b600060ff82169050919050565b620006688162000650565b81146200067457600080fd5b50565b60008151905062000688816200065d565b92915050565b6000819050919050565b620006a3816200068e565b8114620006af57600080fd5b50565b600081519050620006c38162000698565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006f682620006c9565b9050919050565b6200070881620006e9565b81146200071457600080fd5b50565b6000815190506200072881620006fd565b92915050565b600080600080600060a086880312156200074d576200074c620004c7565b5b600086015167ffffffffffffffff8111156200076e576200076d620004cc565b5b6200077c888289016200061d565b955050602086015167ffffffffffffffff811115620007a0576200079f620004cc565b5b620007ae888289016200061d565b9450506040620007c18882890162000677565b9350506060620007d488828901620006b2565b9250506080620007e78882890162000717565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200084757607f821691505b6020821081036200085d576200085c620007ff565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000888565b620008d3868362000888565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000916620009106200090a846200068e565b620008eb565b6200068e565b9050919050565b6000819050919050565b6200093283620008f5565b6200094a62000941826200091d565b84845462000895565b825550505050565b600090565b6200096162000952565b6200096e81848462000927565b505050565b5b8181101562000996576200098a60008262000957565b60018101905062000974565b5050565b601f821115620009e557620009af8162000863565b620009ba8462000878565b81016020851015620009ca578190505b620009e2620009d98562000878565b83018262000973565b50505b505050565b600082821c905092915050565b600062000a0a60001984600802620009ea565b1980831691505092915050565b600062000a258383620009f7565b9150826002028217905092915050565b62000a4082620007f4565b67ffffffffffffffff81111562000a5c5762000a5b620004ec565b5b62000a6882546200082e565b62000a758282856200099a565b600060209050601f83116001811462000aad576000841562000a98578287015190505b62000aa4858262000a17565b86555062000b14565b601f19841662000abd8662000863565b60005b8281101562000ae75784890151825560018201915060208501945060208101905062000ac0565b8683101562000b07578489015162000b03601f891682620009f7565b8355505b6001600288020188555050505b505050505050565b62000b2781620006e9565b82525050565b600060208201905062000b44600083018462000b1c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000bd85780860481111562000bb05762000baf62000b4a565b5b600185161562000bc05780820291505b808102905062000bd08562000b79565b945062000b90565b94509492505050565b60008262000bf3576001905062000cc6565b8162000c03576000905062000cc6565b816001811462000c1c576002811462000c275762000c5d565b600191505062000cc6565b60ff84111562000c3c5762000c3b62000b4a565b5b8360020a91508482111562000c565762000c5562000b4a565b5b5062000cc6565b5060208310610133831016604e8410600b841016171562000c975782820a90508381111562000c915762000c9062000b4a565b5b62000cc6565b62000ca6848484600162000b86565b9250905081840481111562000cc05762000cbf62000b4a565b5b81810290505b9392505050565b600062000cda826200068e565b915062000ce78362000650565b925062000d167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000be1565b905092915050565b600062000d2b826200068e565b915062000d38836200068e565b925082820262000d48816200068e565b9150828204841483151762000d625762000d6162000b4a565b5b5092915050565b600062000d76826200068e565b915062000d83836200068e565b925082820190508082111562000d9e5762000d9d62000b4a565b5b92915050565b62000daf816200068e565b82525050565b600060608201905062000dcc600083018662000b1c565b62000ddb602083018562000da4565b62000dea604083018462000da4565b949350505050565b600060208201905062000e09600083018462000da4565b92915050565b61129c8062000e1f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610239578063a9059cbb14610257578063dd62ed3e14610287578063f2fde38b146102b7576100ea565b806370a08231146101e1578063715018a6146102115780638da5cb5b1461021b576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806340c10f19146101a957806342966c68146101c5576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f76102d3565b6040516101049190610ec3565b60405180910390f35b61012760048036038101906101229190610f7e565b610365565b6040516101349190610fd9565b60405180910390f35b610145610388565b6040516101529190611003565b60405180910390f35b6101756004803603810190610170919061101e565b610392565b6040516101829190610fd9565b60405180910390f35b6101936103c1565b6040516101a0919061108d565b60405180910390f35b6101c360048036038101906101be9190610f7e565b6103d8565b005b6101df60048036038101906101da91906110a8565b6103ee565b005b6101fb60048036038101906101f691906110d5565b6103fb565b6040516102089190611003565b60405180910390f35b610219610443565b005b610223610457565b6040516102309190611111565b60405180910390f35b610241610481565b60405161024e9190610ec3565b60405180910390f35b610271600480360381019061026c9190610f7e565b610513565b60405161027e9190610fd9565b60405180910390f35b6102a1600480360381019061029c919061112c565b610536565b6040516102ae9190611003565b60405180910390f35b6102d160048036038101906102cc91906110d5565b6105bd565b005b6060600380546102e29061119b565b80601f016020809104026020016040519081016040528092919081815260200182805461030e9061119b565b801561035b5780601f106103305761010080835404028352916020019161035b565b820191906000526020600020905b81548152906001019060200180831161033e57829003601f168201915b5050505050905090565b600080610370610643565b905061037d81858561064b565b600191505092915050565b6000600254905090565b60008061039d610643565b90506103aa85828561065d565b6103b58585856106f2565b60019150509392505050565b6000600560149054906101000a900460ff16905090565b6103e06107e6565b6103ea828261086d565b5050565b6103f833826108ef565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61044b6107e6565b6104556000610971565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546104909061119b565b80601f01602080910402602001604051908101604052809291908181526020018280546104bc9061119b565b80156105095780601f106104de57610100808354040283529160200191610509565b820191906000526020600020905b8154815290600101906020018083116104ec57829003601f168201915b5050505050905090565b60008061051e610643565b905061052b8185856106f2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6105c56107e6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106375760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161062e9190611111565b60405180910390fd5b61064081610971565b50565b600033905090565b6106588383836001610a37565b505050565b60006106698484610536565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156106ec57818110156106dc578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016106d3939291906111cc565b60405180910390fd5b6106eb84848484036000610a37565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107645760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161075b9190611111565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107d65760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107cd9190611111565b60405180910390fd5b6107e1838383610c0e565b505050565b6107ee610643565b73ffffffffffffffffffffffffffffffffffffffff1661080c610457565b73ffffffffffffffffffffffffffffffffffffffff161461086b5761082f610643565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108629190611111565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108df5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108d69190611111565b60405180910390fd5b6108eb60008383610c0e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109615760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109589190611111565b60405180910390fd5b61096d82600083610c0e565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610aa95760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610aa09190611111565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b1b5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610b129190611111565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610c08578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610bff9190611003565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c60578060026000828254610c549190611232565b92505081905550610d33565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610cec578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610ce3939291906111cc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d7c5780600260008282540392505081905550610dc9565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e269190611003565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e6d578082015181840152602081019050610e52565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e9582610e33565b610e9f8185610e3e565b9350610eaf818560208601610e4f565b610eb881610e79565b840191505092915050565b60006020820190508181036000830152610edd8184610e8a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1582610eea565b9050919050565b610f2581610f0a565b8114610f3057600080fd5b50565b600081359050610f4281610f1c565b92915050565b6000819050919050565b610f5b81610f48565b8114610f6657600080fd5b50565b600081359050610f7881610f52565b92915050565b60008060408385031215610f9557610f94610ee5565b5b6000610fa385828601610f33565b9250506020610fb485828601610f69565b9150509250929050565b60008115159050919050565b610fd381610fbe565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b610ffd81610f48565b82525050565b60006020820190506110186000830184610ff4565b92915050565b60008060006060848603121561103757611036610ee5565b5b600061104586828701610f33565b935050602061105686828701610f33565b925050604061106786828701610f69565b9150509250925092565b600060ff82169050919050565b61108781611071565b82525050565b60006020820190506110a2600083018461107e565b92915050565b6000602082840312156110be576110bd610ee5565b5b60006110cc84828501610f69565b91505092915050565b6000602082840312156110eb576110ea610ee5565b5b60006110f984828501610f33565b91505092915050565b61110b81610f0a565b82525050565b60006020820190506111266000830184611102565b92915050565b6000806040838503121561114357611142610ee5565b5b600061115185828601610f33565b925050602061116285828601610f33565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111b357607f821691505b6020821081036111c6576111c561116c565b5b50919050565b60006060820190506111e16000830186611102565b6111ee6020830185610ff4565b6111fb6040830184610ff4565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123d82610f48565b915061124883610f48565b92508282019050808211156112605761125f611203565b5b9291505056fea2646970667358221220a21133c27ac93cfcaf2f67ef0b1ae7d3a607d16f5411a9c90fdaa0314bc79bb164736f6c63430008140033";

type SimpleERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleERC20__factory extends ContractFactory {
  constructor(...args: SimpleERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    totalSupply: BigNumberish,
    owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      totalSupply,
      owner,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    totalSupply: BigNumberish,
    owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      decimals_,
      totalSupply,
      owner,
      overrides || {}
    ) as Promise<
      SimpleERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleERC20__factory {
    return super.connect(runner) as SimpleERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleERC20Interface {
    return new Interface(_abi) as SimpleERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleERC20 {
    return new Contract(address, _abi, runner) as unknown as SimpleERC20;
  }
}
